---
#EXPECTS: [hosts: localhost] [become: no] [connection: local] in playbook call


# SPLIT CA CERTIFICATE FILE: Requires specific certificate chain order, with the signing cert as first entry in the file
# and the ROOT CA as the last entry (eg: wildcard + int3 + int2 + int1 + root)
- block:
  - name: Split all certificates from root cert file (required by keytool)
    command: >
      csplit --keep-files --elide-empty-files --prefix "{{ssl_certs_common_name}}-"
      "{{ssl_certs_common_name}}.pem" '/END CERTIFICATE/+1' {*}
    args:
      chdir: "{{ssl_certs_path}}"

  - name: Find cert files generated by csplit
    lineinfile:
      path: "{{item}}"
      line: "-----END CERTIFICATE-----"
      state: present
    check_mode: yes
    register: command_results
    with_fileglob: "{{ ssl_certs_path + '/' + ssl_certs_common_name + '-*'  }}"

  - name: Delete any empty files generated by csplit
    file:
      path: "{{item.item}}"
      state: absent
    with_items: "{{ command_results.results }}"
    when: item.changed
    no_log: true

  - name: Import all certificates generated by csplit into each node's keystore
    command: >
      keytool -keystore "{{host}}-keystore.jks" -alias "{{cert}}" -importcert -file "{{cert}}" -noprompt
      -storepass "{{cluster_keystore_password}}" -keypass "{{cluster_keystore_password}}"
    args:
      chdir: "{{ssl_certs_path}}"
    vars:
      host: "{{item[0]}}"
      cert: "{{item[1]}}"
    with_nested:
    - "{{ groups['dse'] + groups['opsc_dsecore'] + groups['add_node'] | default([]) + groups['add_datacenter'] | default([]) }}"
    - "{{lookup('fileglob', ssl_certs_path + '/'+ ssl_certs_common_name +'-*').split(',') | sort |  reverse | list }}"


# IMPORT PRIVATE KEY: Imports wildcard private key into keystore
# We need to create pkcs12 file because Keytool cant import external keys otherwise
- block:
  - name: Create pkcs12 file from cert and key
    command: >
      openssl pkcs12 -export -in "{{ssl_certs_common_name}}.pem" -inkey "{{ssl_certs_common_name}}.key"
      -name "{{ssl_certs_common_name}}" -out "{{ssl_certs_common_name}}.p12"
      -password "pass:{{cluster_keystore_password}}"
    args:
      chdir: "{{ssl_certs_path}}"

  - name: Import pkcs12 file into each node's keystore
    command: >
      keytool -importkeystore -srckeystore "{{ssl_certs_common_name}}.p12" -srcstoretype pkcs12
      -srcstorepass "{{cluster_keystore_password}}" -srckeypass "{{cluster_keystore_password}}"
      -destkeystore "{{host}}-keystore.jks" -alias "{{ssl_certs_common_name}}"
      -deststorepass "{{cluster_keystore_password}}" -destkeypass "{{cluster_keystore_password}}"
    args:
      chdir: "{{ssl_certs_path}}"
    vars:
      host: "{{ item }}"
    with_items:
    - "{{ groups['dse']}}"
    - "{{ groups['opsc_dsecore']}}"
    - "{{ groups['add_node'] | default([]) }}"
    - "{{ groups['add_datacenter'] | default([]) }}"
    
