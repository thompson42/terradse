---
#EXPECTS: [hosts: localhost] [become: no] [connection: local] in playbook call

# SELF SIGNED CERTIFICATES CN: ip-10-0-0-1.ec2.internal
# uses hostvars[item].private_dns to pull the EC2 private_dns off the hosts file and push it in as the CN on each nodes cert/keystore
#- debug: msg="{{hostvars[item].private_dns if is_self_signed_root_cert | bool else 'ip-' + hostvars[item].private_ip.replace('.', '-') + '.' + ssl_certs_common_name }}"
#  with_items: "{{ groups['dse'] }}"

# CA SIGNED WILDCARD CERTIFICATES CN: [ansible_hostname].mysite.net
# uses [ansible_hostname + '.' + ssl_certs_common_name] to create the DNS name (this is the hostname that ansible returns for the node)
#- debug: msg="{{ansible_hostname + '.' + ssl_certs_common_name }}"
#  with_items: "{{ groups['dse'] }}"

# NO LONGER USED: CA SIGNED WILDCARD CERTIFICATES CN: ip-10-0-0-1.mysite.net
# uses 'ip-' + hostvars[item].private_ip.replace('.', '-') + '.' + ssl_certs_common_name to create the DNS name (this should be either in DNS servers or hosts files.
#- debug: msg="{{'ip-' + hostvars[item].private_ip.replace('.', '-') + '.' + ssl_certs_common_name }}"
#  with_items: "{{ groups['dse'] }}"

# COMBINED CALL:
#- debug: msg="{{hostvars[item].private_dns if is_self_signed_root_cert | bool else ansible_hostname + '.' + ssl_certs_common_name  }}"
#  with_items: "{{ groups['dse'] }}"

#Generate keystores for both [dse] and [opsc_dsecore] nodes


- name: For each node, generate a keystore with key pair
  command: >
    keytool -genkeypair -keyalg RSA -alias "{{item}}" -keystore "{{item}}-keystore.jks" 
    -storepass "{{cluster_keystore_password}}" -keypass "{{cluster_keystore_password}}"
    -validity "{{ssl_certs_days}}" -keysize "{{ssl_certs_key_size}}"
    -dname "CN={{cn}}, OU={{ssl_cluster_name}}, O={{ssl_certs_organization}}, C={{ssl_certs_country}}"
  args:
    chdir: "{{ssl_certs_path}}"
  vars:
    cn: "{{hostvars[item].private_dns if is_self_signed_root_cert | bool else ansible_hostname + '.' + ssl_certs_common_name }}"
  with_items:
  - "{{ groups['dse']}}"
  - "{{ groups['opsc_dsecore']}}"
  - "{{ groups['add_node'] | default([]) }}"
  - "{{ groups['add_datacenter'] | default([]) }}"

- block:
  - name: Generate a signing request from each keystore
    command: >
      keytool -alias "{{item}}" -keystore "{{item}}-keystore.jks" -certreq -file "{{item}}-signing_request.csr" 
      -storepass "{{cluster_keystore_password}}" -keypass "{{cluster_keystore_password}}"
      -dname "CN={{cn}}, OU={{ssl_cluster_name}}, O={{ssl_certs_organization}}, C={{ssl_certs_country}}"
    args:
      chdir: "{{ssl_certs_path}}"
    vars:
      cn: "{{hostvars[item].private_dns if is_self_signed_root_cert | bool else ansible_hostname + '.' + ssl_certs_common_name }}"
    with_items:
    - "{{ groups['dse']}}"
    - "{{ groups['opsc_dsecore']}}"
    - "{{ groups['add_node'] | default([]) }}"
    - "{{ groups['add_datacenter'] | default([]) }}"


  - name: BYO sign each nodes certificate
    command: >
      openssl x509 -req -CA "{{ssl_certs_common_name}}.pem" -CAkey "{{ssl_certs_common_name}}.key" 
      -in "{{item}}-signing_request.csr" -out "{{item}}.crt_signed"
      -days "{{ssl_certs_days}}" -CAcreateserial -passin pass:"{{cluster_keystore_password}}"
    args:
      chdir: "{{ssl_certs_path}}"
    with_items:
    - "{{ groups['dse']}}"
    - "{{ groups['opsc_dsecore']}}"
    - "{{ groups['add_node'] | default([]) }}"
    - "{{ groups['add_datacenter'] | default([]) }}"

# SPLIT CA CERTIFICATE FILE
- block:
  - name: Split all certificates from root cert file (required by keytool)
    command: >
      csplit --keep-files --elide-empty-files --prefix "{{ssl_certs_common_name}}-" 
      "{{ssl_certs_common_name}}.pem" '/END CERTIFICATE/+1' {*}
    args:
      chdir: "{{ssl_certs_path}}"

  - name: Find cert files generated by csplit
    lineinfile:
      path: "{{item}}"
      line: "-----END CERTIFICATE-----"
      state: present
    check_mode: yes
    register: command_results
    with_fileglob: "{{  ssl_certs_path + '/' + ssl_certs_common_name + '-*' }}"

  - name: Delete any empty files generated by csplit
    file:
      path: "{{item.item}}"
      state: absent
    with_items: "{{ command_results.results }}"
    when: item.changed
    no_log: true

- block:
  - name: Import the root certificate into each node's keystore
    command: >
      keytool -keystore "{{host}}-keystore.jks" -alias "{{cert}}" -importcert -file "{{cert}}" -noprompt 
      -storepass "{{cluster_keystore_password}}" -keypass "{{cluster_keystore_password}}"
    args:
      chdir: "{{ssl_certs_path}}"
    vars:
      host: "{{item[0]}}"
      cert: "{{item[1]}}"
    with_nested:
    - "{{ groups['dse'] + groups['opsc_dsecore'] + groups['add_node'] | default([]) + groups['add_datacenter'] | default([]) }}"
    - "{{lookup('fileglob', ssl_certs_path + '/'+ ssl_certs_common_name +'-*').split(',') | sort |  reverse | list }}"

  - name: Import the node's signed certificate into corresponding keystore
    command: >
      keytool -keystore "{{item}}-keystore.jks" -alias "{{item}}" 
      -importcert -noprompt -file "{{item}}.crt_signed" 
      -storepass "{{cluster_keystore_password}}" -keypass "{{cluster_keystore_password}}"
    args:
      chdir: "{{ssl_certs_path}}"    
    with_items:
    - "{{ groups['dse']}}"
    - "{{ groups['opsc_dsecore']}}"
    - "{{ groups['add_node'] | default([]) }}"
    - "{{ groups['add_datacenter'] | default([]) }}"

