
# Exit process immediately if the Cassandra data directory exists on new node (don't want to overwrite a running system !)
- hosts: add_datacenter
  any_errors_fatal: true
  become: true
  become_method: sudo
  roles:
  - { role: dse_test_for_data_directory }
  
  
# Get the current timestamp and register datastax debian packages
- hosts: add_datacenter
  any_errors_fatal: true
  become: true
  become_method: sudo
  tasks:
  - name: Get the current timestamp
    shell: 'date +%Y%m%d%H%M%S'
    register: current_timestamp
  roles:
  - { role: datastax_pkg }

# Populate the seeds list by iterating over all exiting DSE nodes AND all [add_datacenter] nodes
- hosts: dse, add_datacenter
  any_errors_fatal: true
  become: true
  become_method: sudo
  roles:
    - { role: dse_common }

# Install and configure DSE
- hosts: add_datacenter
  any_errors_fatal: true
  become: true
  become_method: sudo
  roles:
    - { role: java8_inst }
    - { role: dse_osparam_change }
    - { role: dse_osparam_ssd_change, when: is_ssd_storage | bool }
    - { role: dse_instbin }
    - { role: dse_updcfg }
    - { role: dse_set_heap }
  vars:
    is_initial_install: false

# Update the seeds list on DSE nodes to include seeds in the new Datacenter    
- hosts: dse
  any_errors_fatal: true
  become: true
  become_method: sudo
  roles:
    - { role: update_existing_nodes_with_new_datacenter_seeds }
    
# Install and configure datastax-agent
- hosts: add_datacenter
  any_errors_fatal: true
  become: true
  become_method: sudo
  tasks:
  
    - name: Install datastax-agent on DSE nodes
      apt:
        name: "datastax-agent={{opsc_ver_target}}"
        state: present
        update_cache: yes
        
    - name: Configure stomp_address
      lineinfile:
        name: "/var/lib/datastax-agent/conf/address.yaml"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      with_items:
        - { regexp: '# stomp_interface', line: "stomp_interface: {{ groups['opsc_srv'][0] }}" }
